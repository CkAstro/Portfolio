/* eslint-env node */

const baseRestrictedImports = {
   patterns: [],
   paths: [
      {
         name: '.',
         message: 'Usage of local index imports is not allowed.',
      },
      {
         name: './index',
         message: 'Import from the source file instead.',
      },
   ],
};

const namingConventions = [
   {
      selector: [
         'classProperty',
         'objectLiteralProperty',
         'typeProperty',
         'classMethod',
         'objectLiteralMethod',
         'typeMethod',
         'accessor',
         'enumMember',
      ],
      format: null,
      modifiers: ['requiresQuotes'],
   },
   {
      selector: 'default',
      format: ['camelCase'],
   },
   {
      selector: ['function', 'enumMember', 'property'],
      format: ['camelCase', 'PascalCase'],
   },
   {
      // allow _camelCase for unused function parameters
      selector: 'parameter',
      format: ['camelCase'],
      modifiers: ['unused'],
      leadingUnderscore: 'allow',
   },
   {
      selector: ['variable'],
      modifiers: ['const'],
      format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
   },
   {
      selector: 'typeLike',
      format: ['PascalCase'],
   },
   {
      selector: 'typeProperty',
      format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
   },
];

const importOrder = {
   groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'type', 'object'],
   pathGroups: [
      {
         pattern: '@/**',
         group: 'internal',
      },
      {
         pattern: '{.,..}/**/*.scss',
         group: 'object',
         position: 'after',
      },
   ],
   alphabetize: {
      order: 'asc',
      caseInsensitive: true,
   },
   pathGroupsExcludedImportTypes: ['builtin'],
   'newlines-between': 'never',
};

module.exports = {
   root: true,
   plugins: ['@typescript-eslint', 'jest', 'testing-library', 'import'],
   env: {
      es6: true,
      node: true,
      browser: true,
   },
   parserOptions: {
      warnOnUnsupportedTypeScriptVersion: false,
   },
   overrides: [
      {
         parser: '@typescript-eslint/parser',
         parserOptions: {
            sourceType: 'module',
            project: './tsconfig.json',
            tsconfigRootDir: __dirname,
         },
         files: ['*.ts', '*.tsx'],
         rules: {
            // TypeScript ESLint Core Disables - https://typescript-eslint.io/docs/linting/configs#eslint-recommended
            'constructor-super': 'off',
            'getter-return': 'off',
            'no-const-assign': 'off',
            'no-dupe-args': 'off',
            'no-dupe-class-members': 'off',
            'no-dupe-keys': 'off',
            'no-func-assign': 'off',
            'no-import-assign': 'off',
            'no-new-symbol': 'off',
            'no-obj-calls': 'off',
            'no-redeclare': 'off',
            'no-setter-return': 'off',
            'no-this-before-super': 'off',
            'no-undef': 'off',
            'no-unreachable': 'off',
            'no-unsafe-negation': 'off',
            'valid-typeof': 'off',
            // TypeScript - https://typescript-eslint.io/rules/
            '@typescript-eslint/adjacent-overload-signatures': 'error',
            '@typescript-eslint/array-type': 'warn',
            '@typescript-eslint/await-thenable': 'error',
            '@typescript-eslint/ban-ts-comment': 'error',
            '@typescript-eslint/ban-types': 'error',
            '@typescript-eslint/consistent-generic-constructors': ['warn', 'constructor'],
            '@typescript-eslint/consistent-type-assertions': [
               'warn',
               {
                  assertionStyle: 'as',
                  objectLiteralTypeAssertions: 'allow-as-parameter',
               },
            ],
            '@typescript-eslint/consistent-type-definitions': ['warn', 'interface'],
            '@typescript-eslint/consistent-type-imports': 'warn',
            '@typescript-eslint/explicit-function-return-type': [
               'warn',
               {
                  allowTypedFunctionExpressions: true,
               },
            ],
            '@typescript-eslint/explicit-member-accessibility': 'warn',
            '@typescript-eslint/explicit-module-boundary-types': 'error',
            '@typescript-eslint/member-delimiter-style': 'warn',
            '@typescript-eslint/method-signature-style': 'warn',
            '@typescript-eslint/naming-convention': ['warn', ...namingConventions],
            '@typescript-eslint/no-base-to-string': 'error',
            '@typescript-eslint/no-confusing-non-null-assertion': 'error',
            '@typescript-eslint/no-confusing-void-expression': [
               'error',
               {
                  ignoreArrowShorthand: true,
                  ignoreVoidOperator: true,
               },
            ],
            '@typescript-eslint/no-empty-interface': 'warn',
            '@typescript-eslint/no-explicit-any': ['warn', { ignoreRestArgs: true }],
            '@typescript-eslint/no-extra-non-null-assertion': 'error',
            '@typescript-eslint/no-extraneous-class': 'error',
            '@typescript-eslint/no-floating-promises': 'error',
            '@typescript-eslint/no-for-in-array': 'error',
            '@typescript-eslint/no-inferrable-types': 'warn',
            '@typescript-eslint/no-invalid-void-type': 'error',
            '@typescript-eslint/no-misused-new': 'error',
            '@typescript-eslint/no-misused-promises': 'error',
            '@typescript-eslint/no-namespace': 'warn',
            '@typescript-eslint/no-redundant-type-constituents': 'warn',
            '@typescript-eslint/no-require-imports': 'error',
            '@typescript-eslint/no-this-alias': 'warn',
            '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'warn',
            '@typescript-eslint/no-unnecessary-condition': 'warn',
            '@typescript-eslint/no-unnecessary-qualifier': 'warn',
            '@typescript-eslint/no-unnecessary-type-assertion': 'error',
            '@typescript-eslint/no-unnecessary-type-constraint': 'warn',
            '@typescript-eslint/no-unsafe-argument': 'error',
            '@typescript-eslint/no-unsafe-assignment': 'error',
            '@typescript-eslint/no-unsafe-call': 'error',
            '@typescript-eslint/no-unsafe-member-access': 'error',
            '@typescript-eslint/no-unsafe-return': 'error',
            '@typescript-eslint/no-useless-empty-export': 'warn',
            '@typescript-eslint/no-var-requires': 'error',
            '@typescript-eslint/non-nullable-type-assertion-style': 'warn',
            '@typescript-eslint/parameter-properties': 'error',
            '@typescript-eslint/prefer-as-const': 'warn',
            '@typescript-eslint/prefer-for-of': 'warn',
            '@typescript-eslint/prefer-namespace-keyword': 'warn',
            '@typescript-eslint/prefer-nullish-coalescing': [
               'warn',
               {
                  ignoreTernaryTests: false,
               },
            ],
            '@typescript-eslint/prefer-optional-chain': 'warn',
            '@typescript-eslint/prefer-readonly': 'warn',
            '@typescript-eslint/prefer-return-this-type': 'error',
            '@typescript-eslint/prefer-string-starts-ends-with': 'warn',
            '@typescript-eslint/prefer-ts-expect-error': 'warn',
            '@typescript-eslint/require-array-sort-compare': 'error',
            '@typescript-eslint/restrict-plus-operands': 'error',
            '@typescript-eslint/restrict-template-expressions': 'error',
            '@typescript-eslint/strict-boolean-expressions': [
               'error',
               {
                  allowString: false,
                  allowNumber: false,
                  allowNullableObject: false,
               },
            ],
            '@typescript-eslint/triple-slash-reference': 'warn',
            '@typescript-eslint/unified-signatures': 'warn',
            // TypeScript Extension Rules - https://typescript-eslint.io/rules/#extension-rules
            'default-param-last': 'off',
            '@typescript-eslint/default-param-last': 'error',
            'no-array-constructor': 'off',
            '@typescript-eslint/no-array-constructor': 'error',
            'no-empty-function': 'off',
            '@typescript-eslint/no-empty-function': 'warn',
            'no-implied-eval': 'off',
            '@typescript-eslint/no-implied-eval': 'error',
            'no-invalid-this': 'off',
            '@typescript-eslint/no-invalid-this': 'error',
            'no-loss-of-precision': 'off',
            '@typescript-eslint/no-loss-of-precision': 'error',
            'no-shadow': 'off',
            '@typescript-eslint/no-shadow': [
               'error',
               {
                  ignoreOnInitialization: true,
               },
            ],
            'no-throw-literal': 'off',
            '@typescript-eslint/no-throw-literal': [
               'error',
               {
                  allowThrowingAny: false,
                  allowThrowingUnknown: false,
               },
            ],
            'no-unused-expressions': 'off',
            '@typescript-eslint/no-unused-expressions': 'warn',
            'no-unused-vars': 'off',
            '@typescript-eslint/no-unused-vars': [
               'warn',
               {
                  argsIgnorePattern: '^_',
                  destructuredArrayIgnorePattern: '^_',
               },
            ],
            'require-await': 'off',
            '@typescript-eslint/require-await': 'error',
         },
      },
      {
         files: ['*.test.js', '*.test.ts', '*.test.jsx', '*.test.tsx', 'test/**'],
         env: {
            'jest/globals': true,
         },
         rules: {
            'jest/consistent-test-it': [
               'warn',
               {
                  withinDescribe: 'test',
               },
            ],
            'jest/expect-expect': 'warn',
            'jest/no-alias-methods': 'warn',
            'jest/no-commented-out-tests': 'warn',
            'jest/no-conditional-expect': 'error',
            'jest/no-conditional-in-test': 'error',
            'jest/no-deprecated-functions': 'error',
            'jest/no-disabled-tests': 'warn',
            'jest/no-done-callback': 'error',
            'jest/no-export': 'error',
            'jest/no-focused-tests': 'warn',
            'jest/no-identical-title': 'error',
            'jest/no-interpolation-in-snapshots': 'error',
            'jest/no-jasmine-globals': 'error',
            // 'jest/no-jest-import': 'error',
            'jest/no-mocks-import': 'error',
            'jest/no-standalone-expect': 'error',
            'jest/no-test-prefixes': 'warn',
            'jest/no-test-return-statement': 'error',
            'jest/prefer-comparison-matcher': 'warn',
            'jest/prefer-equality-matcher': 'warn',
            'jest/prefer-lowercase-title': [
               'warn',
               {
                  ignoreTopLevelDescribe: true,
               },
            ],
            'jest/prefer-mock-promise-shorthand': 'warn',
            'jest/prefer-spy-on': 'warn',
            'jest/prefer-strict-equal': 'error',
            'jest/prefer-to-be': 'warn',
            'jest/prefer-to-contain': 'warn',
            'jest/prefer-to-have-length': 'warn',
            'jest/require-top-level-describe': 'off',
            'jest/valid-describe-callback': 'error',
            'jest/valid-expect': 'error',
            'jest/valid-expect-in-promise': 'error',
            'jest/valid-title': 'warn',
            // Other
            '@typescript-eslint/naming-convention': 'off',
         },
      },
   ],
   rules: {
      'no-plusplus': 'off',
      'no-param-reassign': 'off',
      // Possible Problems - https://eslint.org/docs/latest/rules/#possible-problems
      'array-callback-return': 'error',
      'constructor-super': 'error',
      'for-direction': 'error',
      'getter-return': 'error',
      'no-async-promise-executor': 'error',
      'no-class-assign': 'error',
      'no-compare-neg-zero': 'error',
      'no-cond-assign': 'error',
      'no-const-assign': 'error',
      'no-constant-condition': 'error',
      'no-constructor-return': 'error',
      'no-control-regex': 'error',
      'no-debugger': 'warn',
      'no-dupe-args': 'error',
      'no-dupe-class-members': 'error',
      'no-dupe-else-if': 'error',
      'no-dupe-keys': 'error',
      'no-duplicate-case': 'error',
      'no-empty-character-class': 'error',
      'no-empty-pattern': 'error',
      'no-ex-assign': 'error',
      'no-fallthrough': 'error',
      'no-func-assign': 'error',
      'no-import-assign': 'error',
      'no-inner-declarations': ['error', 'both'],
      'no-invalid-regexp': 'error',
      'no-irregular-whitespace': 'error',
      'no-loss-of-precision': 'error',
      'no-misleading-character-class': 'error',
      'no-new-symbol': 'error',
      'no-obj-calls': 'error',
      'no-prototype-builtins': 'error',
      'no-self-assign': 'warn',
      'no-self-compare': 'warn',
      'no-setter-return': 'error',
      'no-sparse-arrays': 'error',
      'no-template-curly-in-string': 'error',
      'no-this-before-super': 'error',
      'no-undef': 'error',
      'no-unexpected-multiline': 'error',
      'no-unmodified-loop-condition': 'error',
      'no-unreachable': 'warn',
      'no-unsafe-finally': 'error',
      'no-unsafe-negation': 'error',
      'no-unsafe-optional-chaining': 'error',
      'no-unused-vars': [
         'warn',
         {
            argsIgnorePattern: '^_',
            destructuredArrayIgnorePattern: '^_',
         },
      ],
      'no-useless-backreference': 'error',
      'use-isnan': 'error',
      'valid-typeof': 'error',
      // Suggestions - https://eslint.org/docs/latest/rules/#suggestions
      'consistent-return': 'error',
      curly: 'off',
      'default-param-last': 'error',
      eqeqeq: 'error',
      'func-names': ['warn', 'never'],
      'func-style': ['warn', 'declaration', { allowArrowFunctions: true }],
      'no-array-constructor': 'error',
      'no-bitwise': 'off',
      'no-case-declarations': 'error',
      'no-delete-var': 'error',
      'no-else-return': 'warn',
      'no-empty': 'warn',
      'no-empty-function': 'warn',
      'no-eval': 'error',
      'no-extend-native': 'error',
      'no-extra-bind': 'error',
      'no-extra-boolean-cast': 'warn',
      'no-floating-decimal': 'error',
      'no-global-assign': 'error',
      'no-implicit-coercion': 'error',
      'no-implicit-globals': 'error',
      'no-implied-eval': 'error',
      'no-invalid-this': 'error',
      'no-labels': 'error',
      'no-lone-blocks': 'error',
      'no-multi-assign': 'warn',
      'no-new': 'error',
      'no-new-func': 'error',
      'no-new-object': 'error',
      'no-new-wrappers': 'error',
      'no-nonoctal-decimal-escape': 'error',
      'no-octal': 'error',
      'no-octal-escape': 'error',
      'no-proto': 'error',
      'no-redeclare': 'error',
      'no-regex-spaces': 'warn',
      'no-restricted-imports': ['warn', baseRestrictedImports],
      'no-restricted-syntax': [
         'warn',
         {
            selector: "CallExpression[callee.name='String']",
            message: "Don't use the String function. Use .toString() instead.",
         },
         {
            selector: "CallExpression[callee.name='Number']",
            message: "Don't use the Number function. Use parseInt or parseFloat instead.",
         },
         {
            selector: "CallExpression[callee.name='Boolean']",
            message: "Don't use the Boolean function. Use a strict comparison instead.",
         },
      ],
      'no-return-assign': 'warn',
      'no-script-url': 'error',
      'no-sequences': 'warn',
      'no-shadow': [
         'error',
         {
            ignoreOnInitialization: true,
         },
      ],
      'no-shadow-restricted-names': 'error',
      'no-throw-literal': 'error',
      'no-unused-expressions': 'warn',
      'no-useless-call': 'error',
      'no-useless-catch': 'warn',
      'no-useless-computed-key': 'warn',
      'no-useless-concat': 'error',
      'no-useless-escape': 'warn',
      'no-useless-rename': 'warn',
      'no-useless-return': 'warn',
      'no-var': 'error',
      'no-with': 'error',
      'one-var': ['warn', 'never'],
      'operator-assignment': 'warn',
      'prefer-arrow-callback': 'warn',
      'prefer-const': 'warn',
      'prefer-numeric-literals': 'warn',
      'prefer-object-spread': 'warn',
      'prefer-promise-reject-errors': 'error',
      'prefer-rest-params': 'warn',
      'prefer-spread': 'warn',
      'prefer-template': 'warn',
      radix: ['error', 'as-needed'],
      'require-await': 'error',
      'require-yield': 'error',
      // Layout & Formatting - https://eslint.org/docs/latest/rules/#layout--formatting
      // ---- Nothing in this category. Defer to Prettier. ----
      // Import - https://github.com/import-js/eslint-plugin-import
      'import/no-duplicates': 'warn',
      'import/order': ['error', importOrder],
   },
};
